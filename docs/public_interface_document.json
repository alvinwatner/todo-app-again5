{
  "package_name": "com.steve.todo_app_v5",
  "project_description": "The Flutter project is a Todo application that allows users to create, view, update, and delete todo items. Users can mark todo items as complete, view due dates, and interact with custom dialogs and bottom sheets. The application follows the Stacked architecture, which separates the concerns of the application into distinct layers: UI, View Model, and Service.",
  "architecture_overview": "The Stacked architecture used in this application provides a modular and testable codebase. The UI layer consists of the various views and widgets, the View Model layer handles the business logic and state management, and the Service layer manages dependencies and provides access to external resources. This separation of concerns allows for easy addition of new features, services, and UI components.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the custom dialog functionality in the Flutter application. It provides a centralized way to register and use different types of dialogs throughout the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers the custom dialog builders with the DialogService, allowing the app to display various types of dialogs throughout the UI.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app/app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_item.dart",
      "description": "The `TodoItem` widget is responsible for rendering a single to-do item within the home screen of a to-do list application. It displays the title, description, due date (if set), and provides controls to mark the task as complete or delete it.",
      "class_diagram": "@startuml\nclass TodoItem {\n  +Todo todo\n  +Function(String) onToggle\n  +Function(String) onDelete\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of the `TodoItem` widget, including the task title, description, due date, and controls to mark the task as complete or delete it.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:todo_app_v5/models/todo.dart",
        "package:todo_app_v5/ui/common/app_colors.dart",
        "package:todo_app_v5/utils/date_time_utils.dart"
      ]
    },
    {
      "name": "lib/models/todo.dart",
      "description": "This file defines a `Todo` class that represents a task or item in a to-do list application. The `Todo` class encapsulates the essential information and functionality related to a todo item, including its unique identifier, title, description, completion status, creation date, and due date. It provides a set of methods and properties that enable the creation, manipulation, and serialization of todo items, supporting the core functionality of a to-do list application.",
      "class_diagram": "@startuml\nclass Todo {\n  +String id\n  +String title\n  +String description\n  +bool isCompleted\n  +DateTime createdAt\n  +DateTime? dueDate\n  +Todo copyWith()\n  +List<Object?> get props\n  +Map<String, dynamic> toJson()\n  +factory Todo.fromJson(Map<String, dynamic> json)\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `Todo` instance with the specified changes, allowing for the modification of individual properties without creating a new object from scratch.",
          "parameters": [
            "String? id",
            "String? title",
            "String? description",
            "bool? isCompleted",
            "DateTime? createdAt",
            "DateTime? dueDate"
          ],
          "return_type": "Todo"
        },
        {
          "name": "get props",
          "description": "Returns a list of the object's properties, used for equality comparison and hashing.",
          "parameters": null,
          "return_type": "List<Object?>"
        },
        {
          "name": "toJson",
          "description": "Converts the `Todo` instance to a JSON-compatible map, enabling serialization and storage of the todo item data.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a new `Todo` instance from a JSON-compatible map, enabling deserialization and reconstruction of todo item data.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Todo"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the custom bottom sheet UI for the application. It defines the different types of bottom sheets that can be used and registers them with the BottomSheetService.",
      "class_diagram": "@startuml\n\nclass BottomSheetType {\n    notice\n}\n\nclass BottomSheetService {\n    setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass NoticeSheet {\n    NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetType --> BottomSheetService : Defines bottom sheet types\nBottomSheetService --> NoticeSheet : Registers sheet builders\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the BottomSheetService with custom sheet builders for each BottomSheetType",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is a view model for a bottom sheet UI component that displays important notices or alerts to the user.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "The InfoAlertDialogModel class is a view model that encapsulates the logic and state for an information alert dialog in a Flutter application. This class is responsible for managing the display and behavior of the information alert dialog, which is a common UI component used to provide users with important notifications or messages.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the InfoAlertDialogModel class, which extends the BaseViewModel class from the stacked package.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface. It serves as a centralized place to manage and access the application's color palette.",
      "class_diagram": "@startuml\n\nclass AppColors {\n  +static final kcPrimaryColor: Color\n  +static final kcPrimaryColorDark: Color\n  +static final kcDarkGreyColor: Color\n  +static final kcMediumGrey: Color\n  +static final kcLightGrey: Color\n  +static final kcVeryLightGrey: Color\n  +static final kcBackgroundColor: Color\n}\n\n@enduml",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "This Dart file contains the `TodoService` class, which is responsible for managing the CRUD (Create, Read, Update, Delete) operations on todo items in a Todo application. It serves as the main interface for interacting with the todo-related data and state, abstracting away the underlying data storage and repository logic.",
      "class_diagram": "@startuml\nclass TodoService {\n  -_repository: HomeRepository\n  +get todos: List<Todo>\n  +loadTodos(): Future<List<Todo>>\n  +addTodo(todo: Todo): Future<void>\n  +toggleTodoStatus(todoId: String): Future<void>\n  +deleteTodo(todoId: String): Future<void>\n}\n\nclass HomeRepository {\n  +todos: List<Todo>\n  +loadTodos(): Future<List<Todo>>\n  +addTodo(todo: Todo): Future<void>\n  +updateTodo(todo: Todo): Future<void>\n  +deleteTodo(todoId: String): Future<void>\n}\n\nTodoService --> HomeRepository\n@enduml",
      "methods": [
        {
          "name": "get todos",
          "description": "Provides access to the list of todo items managed by the service.",
          "parameters": null,
          "return_type": "List<Todo>"
        },
        {
          "name": "loadTodos",
          "description": "Asynchronously loads the list of todo items from the underlying repository.",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "addTodo",
          "description": "Asynchronously adds a new todo item to the repository.",
          "parameters": [
            "todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoStatus",
          "description": "Asynchronously updates the completion status of a todo item in the repository.",
          "parameters": [
            "todoId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Asynchronously deletes a todo item from the repository.",
          "parameters": [
            "todoId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_app_v5/features/home/home_repository.dart",
        "todo_app_v5/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/add_todo/add_todo_sheet.dart",
      "description": "The AddTodoSheet class is responsible for providing a bottom sheet UI component that allows users to create a new todo item. It integrates with the AddTodoForm widget to handle the submission of the todo data and provide it back to the calling context.",
      "class_diagram": "@startuml\nclass AddTodoSheet {\n  + SheetRequest request\n  + Function(SheetResponse) completer\n  + build(BuildContext): Widget\n}\n\nclass AddTodoForm {\n  + onSubmit(Todo): void\n}\n\nAddTodoSheet o-- AddTodoForm\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the AddTodoSheet, which includes the title and the AddTodoForm widget.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_app_v5/features/home/widgets/add_todo_form.dart",
        "package:todo_app_v5/models/todo.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is responsible for managing the overall state and behavior of the application. It serves as the view model for the main app screen, providing the necessary data and functionality to the UI layer.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void initialize()\n  +void dispose()\n}\n\nnote left of AppViewModel : Manages the overall application state and behavior\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the application state and sets up any necessary dependencies or services.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Cleans up and disposes of any resources or subscriptions when the application is terminated.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/confirm_delete/confirm_delete_dialog.dart",
      "description": "This Dart file defines a reusable `ConfirmDeleteDialog` widget that provides a confirmation dialog for deleting an item. It is responsible for displaying a dialog with a customizable title and description, and handling the user's decision to confirm or cancel the deletion.",
      "class_diagram": "@startuml\nclass ConfirmDeleteDialog {\n  + request: DialogRequest\n  + completer: Function(DialogResponse)\n  + build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI of the confirmation dialog, including the title, description, and buttons to confirm or cancel the deletion.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_app_v5/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_form.dart",
      "description": "The `AddTodoForm` class is responsible for providing a user interface for creating new todo items in a todo list application. It allows the user to input a title, description, and due date for a new todo, and then submits the todo to a callback function provided by the parent component.",
      "class_diagram": "@startuml\nclass AddTodoForm extends StatefulWidget {\n  +final Function(Todo) onSubmit\n  +createState(): _AddTodoFormState\n}\n\nclass _AddTodoFormState extends State<AddTodoForm> {\n  -final _formKey = GlobalKey<FormState>()\n  -final _titleController = TextEditingController()\n  -final _descriptionController = TextEditingController()\n  -DateTime? _selectedDueDate\n\n  +dispose(): void\n  +_selectDate(BuildContext): Future<void>\n  +_submitForm(): void\n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "dispose",
          "description": "Cleans up the text editing controllers when the widget is disposed.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "_selectDate",
          "description": "Displays a date picker dialog and updates the selected due date when the user picks a date.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "_submitForm",
          "description": "Validates the form fields and creates a new Todo instance with the user-provided data, then calls the `onSubmit` callback to pass the new todo to the parent component.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Constructs the UI for the add todo form, including text fields for the title and description, a date picker, and a submit button.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:todo_app_v5/models/todo.dart",
        "package:todo_app_v5/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/utils/date_time_utils.dart",
      "description": "This file provides a set of utility functions for working with dates and times in the application. It offers a consistent way to format dates, times, and date-time values, as well as to perform common operations like checking if two dates are the same day, and getting the start and end of a day.",
      "class_diagram": "@startuml\nclass DateTimeUtils {\n  + String formatDate(DateTime date)\n  + String formatDateTime(DateTime date)\n  + String formatTime(DateTime date)\n  + bool isSameDay(DateTime date1, DateTime date2)\n  + DateTime startOfDay(DateTime date)\n  + DateTime endOfDay(DateTime date)\n}\n@enduml",
      "methods": [
        {
          "name": "formatDate",
          "description": "Formats a given DateTime object as a string in the format 'MMM dd, yyyy'.",
          "parameters": [
            "DateTime date"
          ],
          "return_type": "String"
        },
        {
          "name": "formatDateTime",
          "description": "Formats a given DateTime object as a string in the format 'MMM dd, yyyy hh:mm a'.",
          "parameters": [
            "DateTime date"
          ],
          "return_type": "String"
        },
        {
          "name": "formatTime",
          "description": "Formats a given DateTime object as a string in the format 'hh:mm a'.",
          "parameters": [
            "DateTime date"
          ],
          "return_type": "String"
        },
        {
          "name": "isSameDay",
          "description": "Checks if two given DateTime objects represent the same day.",
          "parameters": [
            "DateTime date1",
            "DateTime date2"
          ],
          "return_type": "bool"
        },
        {
          "name": "startOfDay",
          "description": "Returns a new DateTime object representing the start of the day (00:00:00) for the given DateTime.",
          "parameters": [
            "DateTime date"
          ],
          "return_type": "DateTime"
        },
        {
          "name": "endOfDay",
          "description": "Returns a new DateTime object representing the end of the day (23:59:59) for the given DateTime.",
          "parameters": [
            "DateTime date"
          ],
          "return_type": "DateTime"
        }
      ],
      "dependencies": [
        "package:intl/intl.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection and service locator in a Flutter/Dart application. It is a core part of the application's architecture, as it allows for the decoupling and management of dependencies between different components.",
      "class_diagram": "@startuml\nclass StackedLocator {\n  + registerEnvironment(environment: String, environmentFilter: EnvironmentFilter)\n  + registerLazySingleton(service: Service)\n}\nclass BottomSheetService {\n}\nclass DialogService {\n}\nclass NavigationService {\n}\n\nStackedLocator --> BottomSheetService\nStackedLocator --> DialogService\nStackedLocator --> NavigationService\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for setting up the dependency injection and service locator. It registers the necessary environment and dependencies, ensuring that the application can access the required services throughout its lifetime.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/home/home_repository.dart",
      "description": "The HomeRepository class is responsible for managing the state and operations related to the todo list in a Todo application. It provides the core functionality for loading, adding, updating, and deleting todo items.",
      "class_diagram": "@startuml\nclass HomeRepository {\n  - _todos: List<Todo>\n  + get todos: List<Todo>\n  + loadTodos(): Future<List<Todo>>\n  + addTodo(Todo todo): Future<void>\n  + updateTodo(Todo todo): Future<void>\n  + deleteTodo(String id): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "loadTodos",
          "description": "Retrieves the list of todo items. In a real application, this would load the todos from a database or API.",
          "parameters": null,
          "return_type": "Future<List<Todo>>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list.",
          "parameters": [
            "Todo todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list based on its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_app_v5/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of utility functions and constants that help with common UI layout and sizing tasks in a Flutter application. It serves as a central location for managing and applying consistent spacing, sizing, and responsive design principles across the application's user interface.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const double _tinySize\n  + const double _smallSize\n  + const double _mediumSize\n  + const double _largeSize\n  + const double _massiveSize\n\n  + const Widget horizontalSpaceTiny\n  + const Widget horizontalSpaceSmall\n  + const Widget horizontalSpaceMedium\n  + const Widget horizontalSpaceLarge\n\n  + const Widget verticalSpaceTiny\n  + const Widget verticalSpaceSmall\n  + const Widget verticalSpaceMedium\n  + const Widget verticalSpaceLarge\n  + const Widget verticalSpaceMassive\n\n  + Widget spacedDivider\n  + Widget verticalSpace(double height)\n\n  + double screenWidth(BuildContext context)\n  + double screenHeight(BuildContext context)\n  + double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + double halfScreenWidth(BuildContext context)\n  + double thirdScreenWidth(BuildContext context)\n  + double quarterScreenWidth(BuildContext context)\n  + double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + double getResponsiveSmallFontSize(BuildContext context)\n  + double getResponsiveMediumFontSize(BuildContext context)\n  + double getResponsiveLargeFontSize(BuildContext context)\n  + double getResponsiveExtraLargeFontSize(BuildContext context)\n  + double getResponsiveMassiveFontSize(BuildContext context)\n  + double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Gets the width of the screen in the current BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Gets a fraction of the screen height based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Gets a responsive horizontal space value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Gets a responsive font size based on the screen width and provided parameters.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "dart:math"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, their associated view widgets, and provides utility methods to navigate between these routes.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_app_v5/features/home/home_view.dart",
        "package:todo_app_v5/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for rendering a bottom sheet UI component that displays a notice or announcement to the user. It is part of the UI layer of a Todo application and integrates with the `stacked` and `stacked_services` libraries to manage its state and interact with other parts of the application.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  +completer: Function(SheetResponse)?\n  +request: SheetRequest\n  +builder(BuildContext, NoticeSheetModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet *-- NoticeSheetModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for constructing the UI of the `NoticeSheet`. It takes the current `BuildContext`, the `NoticeSheetModel` view model, and an optional child widget as parameters. This method returns the final `Widget` to be displayed in the bottom sheet.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating the `NoticeSheetModel` view model, which manages the state and logic of the `NoticeSheet`. This method is called by the `StackedView` parent class to initialize the view model.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_app_v5/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "todo_app_v5/ui/common/app_colors.dart",
        "todo_app_v5/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "Auto-generated entry for lib/ui/dialogs/info_alert/info_alert_dialog.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/dialogs/add_todo/add_todo_dialog_model.dart",
      "description": "This Dart file defines the AddTodoDialogModel class, which is responsible for managing the state and logic of the 'Add Todo' dialog in the todo app. The main purpose of this class is to provide a way for users to create new todo items and save them to the application's data store.",
      "class_diagram": "@startuml\nclass AddTodoDialogModel {\n  +GlobalKey<FormState> formKey\n  +TextEditingController titleController\n  +TextEditingController descriptionController\n  +void dispose()\n  +void saveTodo(Function(DialogResponse) completer)\n}\n@enduml",
      "methods": [
        {
          "name": "dispose",
          "description": "Disposes of the TextEditingController instances to free up system resources.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "saveTodo",
          "description": "Validates the form data, creates a new Todo object, and calls the provided completer function with the new Todo as the response data.",
          "parameters": [
            "Function(DialogResponse) completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_app_v5/models/todo.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/add_todo/add_todo_dialog.dart",
      "description": "This Dart file contains the `AddTodoDialog` class, which is responsible for creating a dialog UI for adding a new todo item to a todo list application. It provides the core functionality for managing the creation of new todo items, including validating the input, saving the new todo, and handling the dialog's lifecycle.",
      "class_diagram": "@startuml\nclass AddTodoDialog extends StackedView<AddTodoDialogModel> {\n  + AddTodoDialog({required this.request, required this.completer})\n  + Widget builder(BuildContext, AddTodoDialogModel, Widget?)\n  + AddTodoDialogModel viewModelBuilder(BuildContext)\n}\n\nclass AddTodoDialogModel {\n  + final formKey = GlobalKey<FormState>()\n  + final titleController = TextEditingController()\n  + final descriptionController = TextEditingController()\n  + saveTodo(Function(DialogResponse) completer)\n}\n@enduml",
      "methods": [
        {
          "name": "AddTodoDialog",
          "description": "Constructs an `AddTodoDialog` with the provided `DialogRequest` and `completer` callback.",
          "parameters": [
            "required DialogRequest request",
            "required Function(DialogResponse) completer"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "Builds the UI for the `AddTodoDialog`, including the form fields and buttons for saving or cancelling the new todo.",
          "parameters": [
            "BuildContext context",
            "AddTodoDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of `AddTodoDialogModel` to be used by the `StackedView`.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "AddTodoDialogModel"
        },
        {
          "name": "saveTodo",
          "description": "Validates the form input and, if valid, saves the new todo and completes the dialog with a `DialogResponse`.",
          "parameters": [
            "Function(DialogResponse) completer"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_app_v5/models/todo.dart",
        "package:todo_app_v5/ui/common/app_colors.dart",
        "package:todo_app_v5/ui/common/ui_helpers.dart",
        "package:todo_app_v5/ui/dialogs/add_todo/add_todo_dialog_model.dart"
      ]
    },
    {
      "name": "lib/features/profile/profile_repository.dart",
      "description": "The ProfileRepository class is responsible for managing the user's profile data, including loading, saving, and deleting the user's information. It serves as an abstraction layer between the application's UI and the underlying data storage, whether it's secure storage or an API.",
      "class_diagram": "@startuml\nclass ProfileRepository {\n  - User? _user\n  + Future<User?> loadUser()\n  + Future<void> saveUser(User user)\n  + Future<void> deleteUser()\n}\n@enduml",
      "methods": [
        {
          "name": "loadUser",
          "description": "Loads the user's profile data, either from secure storage or a backend API. If the user data is not available, it creates a default user profile.",
          "parameters": null,
          "return_type": "Future<User?>"
        },
        {
          "name": "saveUser",
          "description": "Saves the user's profile data to secure storage or a backend API.",
          "parameters": [
            "User user"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteUser",
          "description": "Deletes the user's profile data from secure storage or a backend API.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_app_v5/models/user.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/profile_avatar.dart",
      "description": "The ProfileAvatar widget is responsible for rendering a user's profile image or a default avatar icon. It provides a clickable avatar that can be tapped to perform a specific action, such as opening a profile screen.",
      "class_diagram": "@startuml\nclass ProfileAvatar {\n  -String? imageUrl\n  -VoidCallback onTap\n  +Widget build(BuildContext)\n  -Widget _buildDefaultAvatar()\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders the profile avatar, which can be either an image loaded from the provided URL or a default avatar icon.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildDefaultAvatar",
          "description": "Builds the default avatar icon to be displayed when no image URL is provided.",
          "parameters": null,
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "todo_app_v5/ui/common/app_colors.dart",
        "todo_app_v5/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/profile/profile_viewmodel.dart",
      "description": "The ProfileViewModel class is responsible for managing the user's profile information and interactions within the application. It provides the necessary functionality to display the user's name, email, profile image, and notifications settings, as well as the ability to update the user's profile image and toggle notifications.",
      "class_diagram": "@startuml\nclass ProfileViewModel {\n  -_userService : UserService\n  -_navigationService : NavigationService\n  +userName : String\n  +userImageUrl : String\n  +userEmail : String\n  +notificationsEnabled : bool\n  +initialize() : Future<void>\n  +navigateBack() : void\n  +updateProfileImage() : Future<void>\n  +toggleNotifications(enabled : bool) : Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the user service and retrieves the user's profile information.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "navigateBack",
          "description": "Navigates back to the previous screen.",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "updateProfileImage",
          "description": "Allows the user to update their profile image.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleNotifications",
          "description": "Toggles the user's notification settings and updates the user profile accordingly.",
          "parameters": [
            "enabled : bool"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_app_v5/app/app.locator.dart",
        "todo_app_v5/models/user.dart",
        "todo_app_v5/services/user_service.dart"
      ]
    },
    {
      "name": "lib/features/profile/profile_view.dart",
      "description": "The ProfileView class is responsible for rendering the user's profile screen in the Todo App. It displays the user's profile image, name, email, and notification settings, and provides functionality to update the profile image and toggle notification preferences.",
      "class_diagram": "@startuml\nclass ProfileView {\n  -_buildProfileImage(ProfileViewModel viewModel): Widget\n  -_buildDefaultProfileImage(): Widget\n  -_buildProfileInfo(ProfileViewModel viewModel): Widget\n  +builder(BuildContext context, ProfileViewModel viewModel, Widget? child): Widget\n  +viewModelBuilder(BuildContext context): ProfileViewModel\n  +onViewModelReady(ProfileViewModel viewModel): void\n}\n\nclass ProfileViewModel {\n  +userName: String\n  +userEmail: String\n  +userImageUrl: String?\n  +notificationsEnabled: bool\n  +isBusy: bool\n  +initialize(): void\n  +updateProfileImage(): void\n  +toggleNotifications(bool value): void\n  +navigateBack(): void\n}\n\nProfileView --> ProfileViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the ProfileView, including the app bar, profile image, user name, and profile information.",
          "parameters": [
            "BuildContext context",
            "ProfileViewModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildProfileImage",
          "description": "Builds the profile image UI, which includes the user's profile image and a button to update the image.",
          "parameters": [
            "ProfileViewModel viewModel"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildDefaultProfileImage",
          "description": "Builds the default profile image UI when the user's profile image is not available.",
          "parameters": [],
          "return_type": "Widget"
        },
        {
          "name": "_buildProfileInfo",
          "description": "Builds the profile information UI, which includes the user's email and notification settings.",
          "parameters": [
            "ProfileViewModel viewModel"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the ProfileViewModel to the ProfileView.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "ProfileViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the ProfileViewModel when the ProfileView is ready.",
          "parameters": [
            "ProfileViewModel viewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:todo_app_v5/features/profile/profile_viewmodel.dart",
        "package:todo_app_v5/ui/common/app_colors.dart",
        "package:todo_app_v5/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/models/user.dart",
      "description": "This Dart file defines the `User` class, which represents a user in the application. It encapsulates the core user data and provides utility methods for working with user information.",
      "class_diagram": "@startuml\nclass User {\n  +final String id\n  +final String name\n  +final String email\n  +final String? imageUrl\n  +final bool notificationsEnabled\n  +User copyWith()\n  +Map<String, dynamic> toJson()\n  +factory User.fromJson(Map<String, dynamic> json)\n  +List<Object?> get props\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `User` instance with the specified changes to the existing properties.",
          "parameters": [
            "String? id",
            "String? name",
            "String? email",
            "String? imageUrl",
            "bool? notificationsEnabled"
          ],
          "return_type": "User"
        },
        {
          "name": "toJson",
          "description": "Converts the `User` instance to a JSON map.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a `User` instance from a JSON map.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "User"
        },
        {
          "name": "props",
          "description": "Returns a list of all the properties of the `User` instance, used for equality comparison.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/services/user_service.dart",
      "description": "The UserService class is responsible for managing the current user's data and providing access to user-related functionality within the application. It serves as the central hub for user-centric operations, handling tasks such as loading, updating, and clearing the user's profile information.",
      "class_diagram": "@startuml\nclass UserService {\n  - _repository: ProfileRepository\n  - _currentUser: User\n  + currentUser: User\n  + initialize(): Future<void>\n  + updateUser(user: User): Future<void>\n  + clearUser(): Future<void>\n  + hasUser: bool\n  + userImageUrl: String\n  + userName: String\n}\n\nclass ProfileRepository {\n  + loadUser(): Future<User>\n  + saveUser(user: User): Future<void>\n  + deleteUser(): Future<void>\n}\n\nUserService --> ProfileRepository\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Loads the current user's profile data from the ProfileRepository and stores it in the _currentUser field.",
          "parameters": [
            ""
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateUser",
          "description": "Updates the current user's profile data by saving the new user object to the ProfileRepository and updating the _currentUser field.",
          "parameters": [
            "user: User"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "clearUser",
          "description": "Deletes the current user's profile data from the ProfileRepository and sets the _currentUser field to null.",
          "parameters": [
            ""
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:todo_app_v5/app/app.locator.dart",
        "package:todo_app_v5/features/profile/profile_repository.dart",
        "package:todo_app_v5/models/user.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant TodoService\nparticipant HomeRepository\nparticipant BottomSheetService\nparticipant DialogService\n\nUser -> AppView: Launch app\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> TodoService: Load todos\nTodoService -> HomeRepository: Load todos\nHomeRepository -> StartupViewModel: Return todos\nStartupViewModel -> HomeView: Navigate to home view\nHomeView -> HomeViewModel: Initialize\nHomeViewModel -> TodoService: Load todos\nTodoService -> HomeRepository: Load todos\nHomeRepository -> HomeViewModel: Return todos\nHomeViewModel -> HomeView: Update UI\n\nUser -> HomeView: Interact (add, toggle, delete todo)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> TodoService: Add/Toggle/Delete todo\nTodoService -> HomeRepository: Add/Update/Delete todo\nHomeRepository -> TodoService: Return updated todos\nTodoService -> HomeViewModel: Return updated todos\nHomeViewModel -> HomeView: Update UI\n\nUser -> HomeView: Show dialog\nHomeView -> HomeViewModel: Request dialog\nHomeViewModel -> DialogService: Show dialog\nDialogService -> HomeViewModel: Return dialog response\nHomeViewModel -> HomeView: Update UI\n\nUser -> HomeView: Show bottom sheet\nHomeView -> HomeViewModel: Request bottom sheet\nHomeViewModel -> BottomSheetService: Show bottom sheet\nBottomSheetService -> HomeViewModel: Return bottom sheet response\nHomeViewModel -> HomeView: Update UI\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, with the ViewModels (e.g., HomeViewModel, StartupViewModel) handling the business logic and state for their respective views. The ViewModels interact with the TodoService and HomeRepository to manage the todo items. They also use the DialogService and BottomSheetService to handle the display and interactions of custom dialogs and bottom sheets. This separation of concerns allows for a modular and testable codebase.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in the app.router.dart file. This file sets up the available routes (HomeView and StartupView) and provides utility methods to navigate between them. The main.dart file sets up the app and runs the AppView, which initializes the Stacked architecture and displays the StartupView. After the startup logic is completed, the StartupViewModel navigates to the HomeView. User interactions within the HomeView, such as opening dialogs or bottom sheets, are handled by the HomeViewModel, which requests the necessary services to display the UI components."
}